// Generated by gencpp from file argus_msgs/FilterPredictStep.msg
// DO NOT EDIT!


#ifndef ARGUS_MSGS_MESSAGE_FILTERPREDICTSTEP_H
#define ARGUS_MSGS_MESSAGE_FILTERPREDICTSTEP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <argus_msgs/MatrixFloat64.h>
#include <argus_msgs/MatrixFloat64.h>
#include <argus_msgs/MatrixFloat64.h>
#include <argus_msgs/MatrixFloat64.h>

namespace argus_msgs
{
template <class ContainerAllocator>
struct FilterPredictStep_
{
  typedef FilterPredictStep_<ContainerAllocator> Type;

  FilterPredictStep_()
    : step_dt(0.0)
    , trans_jacobian()
    , trans_noise_cov()
    , prior_state_cov()
    , post_state_cov()  {
    }
  FilterPredictStep_(const ContainerAllocator& _alloc)
    : step_dt(0.0)
    , trans_jacobian(_alloc)
    , trans_noise_cov(_alloc)
    , prior_state_cov(_alloc)
    , post_state_cov(_alloc)  {
  (void)_alloc;
    }



   typedef double _step_dt_type;
  _step_dt_type step_dt;

   typedef  ::argus_msgs::MatrixFloat64_<ContainerAllocator>  _trans_jacobian_type;
  _trans_jacobian_type trans_jacobian;

   typedef  ::argus_msgs::MatrixFloat64_<ContainerAllocator>  _trans_noise_cov_type;
  _trans_noise_cov_type trans_noise_cov;

   typedef  ::argus_msgs::MatrixFloat64_<ContainerAllocator>  _prior_state_cov_type;
  _prior_state_cov_type prior_state_cov;

   typedef  ::argus_msgs::MatrixFloat64_<ContainerAllocator>  _post_state_cov_type;
  _post_state_cov_type post_state_cov;





  typedef boost::shared_ptr< ::argus_msgs::FilterPredictStep_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::argus_msgs::FilterPredictStep_<ContainerAllocator> const> ConstPtr;

}; // struct FilterPredictStep_

typedef ::argus_msgs::FilterPredictStep_<std::allocator<void> > FilterPredictStep;

typedef boost::shared_ptr< ::argus_msgs::FilterPredictStep > FilterPredictStepPtr;
typedef boost::shared_ptr< ::argus_msgs::FilterPredictStep const> FilterPredictStepConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::argus_msgs::FilterPredictStep_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::argus_msgs::FilterPredictStep_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace argus_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'argus_msgs': ['/home/jrv/Research/RoboticArcitecture/abb_experimental_ws/src/argus_utils/argus_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::argus_msgs::FilterPredictStep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::argus_msgs::FilterPredictStep_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argus_msgs::FilterPredictStep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argus_msgs::FilterPredictStep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argus_msgs::FilterPredictStep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argus_msgs::FilterPredictStep_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::argus_msgs::FilterPredictStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b900620feacd2fcbfc52c9eef367d6d3";
  }

  static const char* value(const ::argus_msgs::FilterPredictStep_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb900620feacd2fcbULL;
  static const uint64_t static_value2 = 0xfc52c9eef367d6d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::argus_msgs::FilterPredictStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "argus_msgs/FilterPredictStep";
  }

  static const char* value(const ::argus_msgs::FilterPredictStep_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::argus_msgs::FilterPredictStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message detailing a filter predict step\n\
#\n\
# Fields\n\
# ======\n\
# step_dt         : The predict time step size\n\
# trans_jacobian  : Transition function jacobian\n\
# trans_noise_cov : Transition noise covariance\n\
# prior_state_cov : State covariance before predict\n\
# post_state_cov  : State covariance after predict \n\
\n\
float64 step_dt \n\
MatrixFloat64 trans_jacobian\n\
MatrixFloat64 trans_noise_cov\n\
MatrixFloat64 prior_state_cov\n\
MatrixFloat64 post_state_cov\n\
================================================================================\n\
MSG: argus_msgs/MatrixFloat64\n\
# Double-precision dynamic-sized matrix message type\n\
bool column_major\n\
uint32 rows\n\
uint32 cols\n\
float64[] data\n\
";
  }

  static const char* value(const ::argus_msgs::FilterPredictStep_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::argus_msgs::FilterPredictStep_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.step_dt);
      stream.next(m.trans_jacobian);
      stream.next(m.trans_noise_cov);
      stream.next(m.prior_state_cov);
      stream.next(m.post_state_cov);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FilterPredictStep_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::argus_msgs::FilterPredictStep_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::argus_msgs::FilterPredictStep_<ContainerAllocator>& v)
  {
    s << indent << "step_dt: ";
    Printer<double>::stream(s, indent + "  ", v.step_dt);
    s << indent << "trans_jacobian: ";
    s << std::endl;
    Printer< ::argus_msgs::MatrixFloat64_<ContainerAllocator> >::stream(s, indent + "  ", v.trans_jacobian);
    s << indent << "trans_noise_cov: ";
    s << std::endl;
    Printer< ::argus_msgs::MatrixFloat64_<ContainerAllocator> >::stream(s, indent + "  ", v.trans_noise_cov);
    s << indent << "prior_state_cov: ";
    s << std::endl;
    Printer< ::argus_msgs::MatrixFloat64_<ContainerAllocator> >::stream(s, indent + "  ", v.prior_state_cov);
    s << indent << "post_state_cov: ";
    s << std::endl;
    Printer< ::argus_msgs::MatrixFloat64_<ContainerAllocator> >::stream(s, indent + "  ", v.post_state_cov);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARGUS_MSGS_MESSAGE_FILTERPREDICTSTEP_H
