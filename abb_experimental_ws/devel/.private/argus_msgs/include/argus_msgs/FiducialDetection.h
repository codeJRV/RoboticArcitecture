// Generated by gencpp from file argus_msgs/FiducialDetection.msg
// DO NOT EDIT!


#ifndef ARGUS_MSGS_MESSAGE_FIDUCIALDETECTION_H
#define ARGUS_MSGS_MESSAGE_FIDUCIALDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <argus_msgs/Point2D.h>

namespace argus_msgs
{
template <class ContainerAllocator>
struct FiducialDetection_
{
  typedef FiducialDetection_<ContainerAllocator> Type;

  FiducialDetection_()
    : name()
    , undistorted(false)
    , normalized(false)
    , points()  {
    }
  FiducialDetection_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , undistorted(false)
    , normalized(false)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _undistorted_type;
  _undistorted_type undistorted;

   typedef uint8_t _normalized_type;
  _normalized_type normalized;

   typedef std::vector< ::argus_msgs::Point2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::argus_msgs::Point2D_<ContainerAllocator> >::other >  _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::argus_msgs::FiducialDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::argus_msgs::FiducialDetection_<ContainerAllocator> const> ConstPtr;

}; // struct FiducialDetection_

typedef ::argus_msgs::FiducialDetection_<std::allocator<void> > FiducialDetection;

typedef boost::shared_ptr< ::argus_msgs::FiducialDetection > FiducialDetectionPtr;
typedef boost::shared_ptr< ::argus_msgs::FiducialDetection const> FiducialDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::argus_msgs::FiducialDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::argus_msgs::FiducialDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace argus_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'argus_msgs': ['/home/jrv/Research/RoboticArcitecture/abb_experimental_ws/src/argus_utils/argus_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::argus_msgs::FiducialDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::argus_msgs::FiducialDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argus_msgs::FiducialDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argus_msgs::FiducialDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argus_msgs::FiducialDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argus_msgs::FiducialDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::argus_msgs::FiducialDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9798b72f528ec3822efac6e4bf3400a7";
  }

  static const char* value(const ::argus_msgs::FiducialDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9798b72f528ec382ULL;
  static const uint64_t static_value2 = 0x2efac6e4bf3400a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::argus_msgs::FiducialDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "argus_msgs/FiducialDetection";
  }

  static const char* value(const ::argus_msgs::FiducialDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::argus_msgs::FiducialDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The name of this fiducial\n\
string name\n\
\n\
# Whether the points are undistorted\n\
bool undistorted\n\
\n\
# Whether the points are in normalized image coordinates\n\
bool normalized\n\
\n\
# The detected points\n\
Point2D[] points\n\
\n\
================================================================================\n\
MSG: argus_msgs/Point2D\n\
float64 x\n\
float64 y\n\
";
  }

  static const char* value(const ::argus_msgs::FiducialDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::argus_msgs::FiducialDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.undistorted);
      stream.next(m.normalized);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FiducialDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::argus_msgs::FiducialDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::argus_msgs::FiducialDetection_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "undistorted: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.undistorted);
    s << indent << "normalized: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.normalized);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::argus_msgs::Point2D_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARGUS_MSGS_MESSAGE_FIDUCIALDETECTION_H
