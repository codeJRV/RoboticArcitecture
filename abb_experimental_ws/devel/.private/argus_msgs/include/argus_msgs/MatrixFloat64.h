// Generated by gencpp from file argus_msgs/MatrixFloat64.msg
// DO NOT EDIT!


#ifndef ARGUS_MSGS_MESSAGE_MATRIXFLOAT64_H
#define ARGUS_MSGS_MESSAGE_MATRIXFLOAT64_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace argus_msgs
{
template <class ContainerAllocator>
struct MatrixFloat64_
{
  typedef MatrixFloat64_<ContainerAllocator> Type;

  MatrixFloat64_()
    : column_major(false)
    , rows(0)
    , cols(0)
    , data()  {
    }
  MatrixFloat64_(const ContainerAllocator& _alloc)
    : column_major(false)
    , rows(0)
    , cols(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _column_major_type;
  _column_major_type column_major;

   typedef uint32_t _rows_type;
  _rows_type rows;

   typedef uint32_t _cols_type;
  _cols_type cols;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::argus_msgs::MatrixFloat64_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::argus_msgs::MatrixFloat64_<ContainerAllocator> const> ConstPtr;

}; // struct MatrixFloat64_

typedef ::argus_msgs::MatrixFloat64_<std::allocator<void> > MatrixFloat64;

typedef boost::shared_ptr< ::argus_msgs::MatrixFloat64 > MatrixFloat64Ptr;
typedef boost::shared_ptr< ::argus_msgs::MatrixFloat64 const> MatrixFloat64ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::argus_msgs::MatrixFloat64_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::argus_msgs::MatrixFloat64_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace argus_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'argus_msgs': ['/home/jrv/Research/RoboticArcitecture/abb_experimental_ws/src/argus_utils/argus_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::argus_msgs::MatrixFloat64_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::argus_msgs::MatrixFloat64_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argus_msgs::MatrixFloat64_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argus_msgs::MatrixFloat64_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argus_msgs::MatrixFloat64_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argus_msgs::MatrixFloat64_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::argus_msgs::MatrixFloat64_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d49ad88054ad35f5431113eea16faa1f";
  }

  static const char* value(const ::argus_msgs::MatrixFloat64_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd49ad88054ad35f5ULL;
  static const uint64_t static_value2 = 0x431113eea16faa1fULL;
};

template<class ContainerAllocator>
struct DataType< ::argus_msgs::MatrixFloat64_<ContainerAllocator> >
{
  static const char* value()
  {
    return "argus_msgs/MatrixFloat64";
  }

  static const char* value(const ::argus_msgs::MatrixFloat64_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::argus_msgs::MatrixFloat64_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Double-precision dynamic-sized matrix message type\n\
bool column_major\n\
uint32 rows\n\
uint32 cols\n\
float64[] data\n\
";
  }

  static const char* value(const ::argus_msgs::MatrixFloat64_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::argus_msgs::MatrixFloat64_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.column_major);
      stream.next(m.rows);
      stream.next(m.cols);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MatrixFloat64_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::argus_msgs::MatrixFloat64_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::argus_msgs::MatrixFloat64_<ContainerAllocator>& v)
  {
    s << indent << "column_major: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.column_major);
    s << indent << "rows: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rows);
    s << indent << "cols: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cols);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARGUS_MSGS_MESSAGE_MATRIXFLOAT64_H
