// Generated by gencpp from file argus_msgs/FilterStepInfo.msg
// DO NOT EDIT!


#ifndef ARGUS_MSGS_MESSAGE_FILTERSTEPINFO_H
#define ARGUS_MSGS_MESSAGE_FILTERSTEPINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <argus_msgs/FilterPredictStep.h>
#include <argus_msgs/FilterUpdateStep.h>

namespace argus_msgs
{
template <class ContainerAllocator>
struct FilterStepInfo_
{
  typedef FilterStepInfo_<ContainerAllocator> Type;

  FilterStepInfo_()
    : header()
    , step_num(0)
    , info_type(0)
    , predict()
    , update()  {
    }
  FilterStepInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , step_num(0)
    , info_type(0)
    , predict(_alloc)
    , update(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _step_num_type;
  _step_num_type step_num;

   typedef uint8_t _info_type_type;
  _info_type_type info_type;

   typedef  ::argus_msgs::FilterPredictStep_<ContainerAllocator>  _predict_type;
  _predict_type predict;

   typedef  ::argus_msgs::FilterUpdateStep_<ContainerAllocator>  _update_type;
  _update_type update;



  enum {
    PREDICT_STEP = 0u,
    UPDATE_STEP = 1u,
  };


  typedef boost::shared_ptr< ::argus_msgs::FilterStepInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::argus_msgs::FilterStepInfo_<ContainerAllocator> const> ConstPtr;

}; // struct FilterStepInfo_

typedef ::argus_msgs::FilterStepInfo_<std::allocator<void> > FilterStepInfo;

typedef boost::shared_ptr< ::argus_msgs::FilterStepInfo > FilterStepInfoPtr;
typedef boost::shared_ptr< ::argus_msgs::FilterStepInfo const> FilterStepInfoConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::argus_msgs::FilterStepInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::argus_msgs::FilterStepInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace argus_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'argus_msgs': ['/home/jrv/Research/RoboticArcitecture/abb_experimental_ws/src/argus_utils/argus_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::argus_msgs::FilterStepInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::argus_msgs::FilterStepInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argus_msgs::FilterStepInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::argus_msgs::FilterStepInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argus_msgs::FilterStepInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::argus_msgs::FilterStepInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::argus_msgs::FilterStepInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f102f1a0b841c1cdbe4dbe82e22681e";
  }

  static const char* value(const ::argus_msgs::FilterStepInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f102f1a0b841c1cULL;
  static const uint64_t static_value2 = 0xdbe4dbe82e22681eULL;
};

template<class ContainerAllocator>
struct DataType< ::argus_msgs::FilterStepInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "argus_msgs/FilterStepInfo";
  }

  static const char* value(const ::argus_msgs::FilterStepInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::argus_msgs::FilterStepInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message detailing a filter predict or update step\n\
#\n\
# Fields\n\
# ======\n\
# header/stamp     : Time at which this step ends or occurs at\n\
# header/frame_id  : This observation source's name [unused for predict]\n\
# step_num  : Filter step index\n\
# info_type : Enumerated active payload type\n\
# predict   : Predict info payload\n\
# update    : Update info payload\n\
\n\
# Defines the active payload field\n\
uint8 PREDICT_STEP = 0\n\
uint8 UPDATE_STEP = 1\n\
\n\
std_msgs/Header header\n\
uint64 step_num\n\
uint8 info_type\n\
argus_msgs/FilterPredictStep predict\n\
argus_msgs/FilterUpdateStep update\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: argus_msgs/FilterPredictStep\n\
# Message detailing a filter predict step\n\
#\n\
# Fields\n\
# ======\n\
# step_dt         : The predict time step size\n\
# trans_jacobian  : Transition function jacobian\n\
# trans_noise_cov : Transition noise covariance\n\
# prior_state_cov : State covariance before predict\n\
# post_state_cov  : State covariance after predict \n\
\n\
float64 step_dt \n\
MatrixFloat64 trans_jacobian\n\
MatrixFloat64 trans_noise_cov\n\
MatrixFloat64 prior_state_cov\n\
MatrixFloat64 post_state_cov\n\
================================================================================\n\
MSG: argus_msgs/MatrixFloat64\n\
# Double-precision dynamic-sized matrix message type\n\
bool column_major\n\
uint32 rows\n\
uint32 cols\n\
float64[] data\n\
================================================================================\n\
MSG: argus_msgs/FilterUpdateStep\n\
# Message detailing a filter update step\n\
#\n\
# Fields\n\
# ======\n\
# prior_state_cov : State covariance before update\n\
# prior_obs_error : Observation prediction error before update\n\
# obs_error_cov   : Theoretical covariance of prediction error before update\n\
# post_state_cov  : State covariance after update\n\
# state_delta     : Correction applied to state from update\n\
# post_obs_error  : Observation prediction error after update\n\
# obs_jacobian    : Observation function jacobian\n\
# obs_noise_cov   : Observation noise covariance \n\
\n\
MatrixFloat64 prior_state_cov\n\
float64[] prior_obs_error\n\
MatrixFloat64 obs_error_cov\n\
\n\
MatrixFloat64 post_state_cov\n\
float64[] state_delta\n\
float64[] post_obs_error\n\
\n\
MatrixFloat64 obs_jacobian\n\
MatrixFloat64 obs_noise_cov\n\
";
  }

  static const char* value(const ::argus_msgs::FilterStepInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::argus_msgs::FilterStepInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.step_num);
      stream.next(m.info_type);
      stream.next(m.predict);
      stream.next(m.update);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FilterStepInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::argus_msgs::FilterStepInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::argus_msgs::FilterStepInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "step_num: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.step_num);
    s << indent << "info_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.info_type);
    s << indent << "predict: ";
    s << std::endl;
    Printer< ::argus_msgs::FilterPredictStep_<ContainerAllocator> >::stream(s, indent + "  ", v.predict);
    s << indent << "update: ";
    s << std::endl;
    Printer< ::argus_msgs::FilterUpdateStep_<ContainerAllocator> >::stream(s, indent + "  ", v.update);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARGUS_MSGS_MESSAGE_FILTERSTEPINFO_H
