# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from argus_msgs/FilterStepInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import argus_msgs.msg
import std_msgs.msg

class FilterStepInfo(genpy.Message):
  _md5sum = "7f102f1a0b841c1cdbe4dbe82e22681e"
  _type = "argus_msgs/FilterStepInfo"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message detailing a filter predict or update step
#
# Fields
# ======
# header/stamp     : Time at which this step ends or occurs at
# header/frame_id  : This observation source's name [unused for predict]
# step_num  : Filter step index
# info_type : Enumerated active payload type
# predict   : Predict info payload
# update    : Update info payload

# Defines the active payload field
uint8 PREDICT_STEP = 0
uint8 UPDATE_STEP = 1

std_msgs/Header header
uint64 step_num
uint8 info_type
argus_msgs/FilterPredictStep predict
argus_msgs/FilterUpdateStep update

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: argus_msgs/FilterPredictStep
# Message detailing a filter predict step
#
# Fields
# ======
# step_dt         : The predict time step size
# trans_jacobian  : Transition function jacobian
# trans_noise_cov : Transition noise covariance
# prior_state_cov : State covariance before predict
# post_state_cov  : State covariance after predict 

float64 step_dt 
MatrixFloat64 trans_jacobian
MatrixFloat64 trans_noise_cov
MatrixFloat64 prior_state_cov
MatrixFloat64 post_state_cov
================================================================================
MSG: argus_msgs/MatrixFloat64
# Double-precision dynamic-sized matrix message type
bool column_major
uint32 rows
uint32 cols
float64[] data
================================================================================
MSG: argus_msgs/FilterUpdateStep
# Message detailing a filter update step
#
# Fields
# ======
# prior_state_cov : State covariance before update
# prior_obs_error : Observation prediction error before update
# obs_error_cov   : Theoretical covariance of prediction error before update
# post_state_cov  : State covariance after update
# state_delta     : Correction applied to state from update
# post_obs_error  : Observation prediction error after update
# obs_jacobian    : Observation function jacobian
# obs_noise_cov   : Observation noise covariance 

MatrixFloat64 prior_state_cov
float64[] prior_obs_error
MatrixFloat64 obs_error_cov

MatrixFloat64 post_state_cov
float64[] state_delta
float64[] post_obs_error

MatrixFloat64 obs_jacobian
MatrixFloat64 obs_noise_cov"""
  # Pseudo-constants
  PREDICT_STEP = 0
  UPDATE_STEP = 1

  __slots__ = ['header','step_num','info_type','predict','update']
  _slot_types = ['std_msgs/Header','uint64','uint8','argus_msgs/FilterPredictStep','argus_msgs/FilterUpdateStep']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,step_num,info_type,predict,update

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FilterStepInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.step_num is None:
        self.step_num = 0
      if self.info_type is None:
        self.info_type = 0
      if self.predict is None:
        self.predict = argus_msgs.msg.FilterPredictStep()
      if self.update is None:
        self.update = argus_msgs.msg.FilterUpdateStep()
    else:
      self.header = std_msgs.msg.Header()
      self.step_num = 0
      self.info_type = 0
      self.predict = argus_msgs.msg.FilterPredictStep()
      self.update = argus_msgs.msg.FilterUpdateStep()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_QBdB2I().pack(_x.step_num, _x.info_type, _x.predict.step_dt, _x.predict.trans_jacobian.column_major, _x.predict.trans_jacobian.rows, _x.predict.trans_jacobian.cols))
      length = len(self.predict.trans_jacobian.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.predict.trans_jacobian.data))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.predict.trans_noise_cov.column_major, _x.predict.trans_noise_cov.rows, _x.predict.trans_noise_cov.cols))
      length = len(self.predict.trans_noise_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.predict.trans_noise_cov.data))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.predict.prior_state_cov.column_major, _x.predict.prior_state_cov.rows, _x.predict.prior_state_cov.cols))
      length = len(self.predict.prior_state_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.predict.prior_state_cov.data))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.predict.post_state_cov.column_major, _x.predict.post_state_cov.rows, _x.predict.post_state_cov.cols))
      length = len(self.predict.post_state_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.predict.post_state_cov.data))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.update.prior_state_cov.column_major, _x.update.prior_state_cov.rows, _x.update.prior_state_cov.cols))
      length = len(self.update.prior_state_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.update.prior_state_cov.data))
      length = len(self.update.prior_obs_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.update.prior_obs_error))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.update.obs_error_cov.column_major, _x.update.obs_error_cov.rows, _x.update.obs_error_cov.cols))
      length = len(self.update.obs_error_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.update.obs_error_cov.data))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.update.post_state_cov.column_major, _x.update.post_state_cov.rows, _x.update.post_state_cov.cols))
      length = len(self.update.post_state_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.update.post_state_cov.data))
      length = len(self.update.state_delta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.update.state_delta))
      length = len(self.update.post_obs_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.update.post_obs_error))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.update.obs_jacobian.column_major, _x.update.obs_jacobian.rows, _x.update.obs_jacobian.cols))
      length = len(self.update.obs_jacobian.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.update.obs_jacobian.data))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.update.obs_noise_cov.column_major, _x.update.obs_noise_cov.rows, _x.update.obs_noise_cov.cols))
      length = len(self.update.obs_noise_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.update.obs_noise_cov.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.predict is None:
        self.predict = argus_msgs.msg.FilterPredictStep()
      if self.update is None:
        self.update = argus_msgs.msg.FilterUpdateStep()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.step_num, _x.info_type, _x.predict.step_dt, _x.predict.trans_jacobian.column_major, _x.predict.trans_jacobian.rows, _x.predict.trans_jacobian.cols,) = _get_struct_QBdB2I().unpack(str[start:end])
      self.predict.trans_jacobian.column_major = bool(self.predict.trans_jacobian.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.predict.trans_jacobian.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 9
      (_x.predict.trans_noise_cov.column_major, _x.predict.trans_noise_cov.rows, _x.predict.trans_noise_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.predict.trans_noise_cov.column_major = bool(self.predict.trans_noise_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.predict.trans_noise_cov.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 9
      (_x.predict.prior_state_cov.column_major, _x.predict.prior_state_cov.rows, _x.predict.prior_state_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.predict.prior_state_cov.column_major = bool(self.predict.prior_state_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.predict.prior_state_cov.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 9
      (_x.predict.post_state_cov.column_major, _x.predict.post_state_cov.rows, _x.predict.post_state_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.predict.post_state_cov.column_major = bool(self.predict.post_state_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.predict.post_state_cov.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 9
      (_x.update.prior_state_cov.column_major, _x.update.prior_state_cov.rows, _x.update.prior_state_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.update.prior_state_cov.column_major = bool(self.update.prior_state_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.prior_state_cov.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.prior_obs_error = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 9
      (_x.update.obs_error_cov.column_major, _x.update.obs_error_cov.rows, _x.update.obs_error_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.update.obs_error_cov.column_major = bool(self.update.obs_error_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.obs_error_cov.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 9
      (_x.update.post_state_cov.column_major, _x.update.post_state_cov.rows, _x.update.post_state_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.update.post_state_cov.column_major = bool(self.update.post_state_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.post_state_cov.data = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.state_delta = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.post_obs_error = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 9
      (_x.update.obs_jacobian.column_major, _x.update.obs_jacobian.rows, _x.update.obs_jacobian.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.update.obs_jacobian.column_major = bool(self.update.obs_jacobian.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.obs_jacobian.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 9
      (_x.update.obs_noise_cov.column_major, _x.update.obs_noise_cov.rows, _x.update.obs_noise_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.update.obs_noise_cov.column_major = bool(self.update.obs_noise_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.obs_noise_cov.data = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_QBdB2I().pack(_x.step_num, _x.info_type, _x.predict.step_dt, _x.predict.trans_jacobian.column_major, _x.predict.trans_jacobian.rows, _x.predict.trans_jacobian.cols))
      length = len(self.predict.trans_jacobian.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.predict.trans_jacobian.data.tostring())
      _x = self
      buff.write(_get_struct_B2I().pack(_x.predict.trans_noise_cov.column_major, _x.predict.trans_noise_cov.rows, _x.predict.trans_noise_cov.cols))
      length = len(self.predict.trans_noise_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.predict.trans_noise_cov.data.tostring())
      _x = self
      buff.write(_get_struct_B2I().pack(_x.predict.prior_state_cov.column_major, _x.predict.prior_state_cov.rows, _x.predict.prior_state_cov.cols))
      length = len(self.predict.prior_state_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.predict.prior_state_cov.data.tostring())
      _x = self
      buff.write(_get_struct_B2I().pack(_x.predict.post_state_cov.column_major, _x.predict.post_state_cov.rows, _x.predict.post_state_cov.cols))
      length = len(self.predict.post_state_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.predict.post_state_cov.data.tostring())
      _x = self
      buff.write(_get_struct_B2I().pack(_x.update.prior_state_cov.column_major, _x.update.prior_state_cov.rows, _x.update.prior_state_cov.cols))
      length = len(self.update.prior_state_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.update.prior_state_cov.data.tostring())
      length = len(self.update.prior_obs_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.update.prior_obs_error.tostring())
      _x = self
      buff.write(_get_struct_B2I().pack(_x.update.obs_error_cov.column_major, _x.update.obs_error_cov.rows, _x.update.obs_error_cov.cols))
      length = len(self.update.obs_error_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.update.obs_error_cov.data.tostring())
      _x = self
      buff.write(_get_struct_B2I().pack(_x.update.post_state_cov.column_major, _x.update.post_state_cov.rows, _x.update.post_state_cov.cols))
      length = len(self.update.post_state_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.update.post_state_cov.data.tostring())
      length = len(self.update.state_delta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.update.state_delta.tostring())
      length = len(self.update.post_obs_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.update.post_obs_error.tostring())
      _x = self
      buff.write(_get_struct_B2I().pack(_x.update.obs_jacobian.column_major, _x.update.obs_jacobian.rows, _x.update.obs_jacobian.cols))
      length = len(self.update.obs_jacobian.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.update.obs_jacobian.data.tostring())
      _x = self
      buff.write(_get_struct_B2I().pack(_x.update.obs_noise_cov.column_major, _x.update.obs_noise_cov.rows, _x.update.obs_noise_cov.cols))
      length = len(self.update.obs_noise_cov.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.update.obs_noise_cov.data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.predict is None:
        self.predict = argus_msgs.msg.FilterPredictStep()
      if self.update is None:
        self.update = argus_msgs.msg.FilterUpdateStep()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.step_num, _x.info_type, _x.predict.step_dt, _x.predict.trans_jacobian.column_major, _x.predict.trans_jacobian.rows, _x.predict.trans_jacobian.cols,) = _get_struct_QBdB2I().unpack(str[start:end])
      self.predict.trans_jacobian.column_major = bool(self.predict.trans_jacobian.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.predict.trans_jacobian.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 9
      (_x.predict.trans_noise_cov.column_major, _x.predict.trans_noise_cov.rows, _x.predict.trans_noise_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.predict.trans_noise_cov.column_major = bool(self.predict.trans_noise_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.predict.trans_noise_cov.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 9
      (_x.predict.prior_state_cov.column_major, _x.predict.prior_state_cov.rows, _x.predict.prior_state_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.predict.prior_state_cov.column_major = bool(self.predict.prior_state_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.predict.prior_state_cov.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 9
      (_x.predict.post_state_cov.column_major, _x.predict.post_state_cov.rows, _x.predict.post_state_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.predict.post_state_cov.column_major = bool(self.predict.post_state_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.predict.post_state_cov.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 9
      (_x.update.prior_state_cov.column_major, _x.update.prior_state_cov.rows, _x.update.prior_state_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.update.prior_state_cov.column_major = bool(self.update.prior_state_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.prior_state_cov.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.prior_obs_error = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 9
      (_x.update.obs_error_cov.column_major, _x.update.obs_error_cov.rows, _x.update.obs_error_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.update.obs_error_cov.column_major = bool(self.update.obs_error_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.obs_error_cov.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 9
      (_x.update.post_state_cov.column_major, _x.update.post_state_cov.rows, _x.update.post_state_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.update.post_state_cov.column_major = bool(self.update.post_state_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.post_state_cov.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.state_delta = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.post_obs_error = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 9
      (_x.update.obs_jacobian.column_major, _x.update.obs_jacobian.rows, _x.update.obs_jacobian.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.update.obs_jacobian.column_major = bool(self.update.obs_jacobian.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.obs_jacobian.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 9
      (_x.update.obs_noise_cov.column_major, _x.update.obs_noise_cov.rows, _x.update.obs_noise_cov.cols,) = _get_struct_B2I().unpack(str[start:end])
      self.update.obs_noise_cov.column_major = bool(self.update.obs_noise_cov.column_major)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.update.obs_noise_cov.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_QBdB2I = None
def _get_struct_QBdB2I():
    global _struct_QBdB2I
    if _struct_QBdB2I is None:
        _struct_QBdB2I = struct.Struct("<QBdB2I")
    return _struct_QBdB2I
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
